---
import Layout from "../../layouts/Layout.astro";
import Arrow from "@/icons/arror2.astro";
import MusicTable from "../../components/MusicTable.astro";
import { allPlaylists, songs } from "@/lib/data";
import { CardPlayButton } from "@/components/CardPlayButton";

const { id } = Astro.params;

const playlist = allPlaylists.find((playlist) => playlist.id === id);

//console.log(playlist);
const playListSongs = songs.filter(
  (song) => song.albumId === playlist?.albumId
);
const durationInSeconds = (duration: string): number => {
  const parts = duration.split(":").map(Number);
  if (parts.length === 2) {
    // Si la duración solo tiene minutos y segundos
    return parts[0] * 60 + parts[1]; // Convertir a segundos
  } else if (parts.length === 3) {
    // Si la duración incluye horas, minutos y segundos
    return parts[0] * 3600 + parts[1] * 60 + parts[2]; // Convertir a segundos
  } else {
    return 0; // Duración inválida
  }
};
const formatDuration = (totalSeconds: number): string => {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  if (hours > 0) {
    return `${hours} h`;
  } else {
    return `${minutes} min`;
  }
};
// Calcular la duración total en segundos y formatearla
const totalDurationInSeconds = playListSongs.reduce(
  (acc, song) => acc + durationInSeconds(song.duration),
  0
);
const formattedDuration = formatDuration(totalDurationInSeconds);
//console.log(playlistSongs);
---

<Layout title={`${playlist?.title} - Spotify Clone`}>
  <div
    id="playlist-container"
    class=`relative transition-all w-full duration-1000 text-gray-400 rounded-lg`
    transition:name=`playlist ${id} box`
    style=`background-image: linear-gradient(180deg, ${playlist?.color?.accent}90, rgba(1, 1, 1, 1) 80%), url('${playlist?.cover}'); background-size: cover;`
  >
    <!-- header -->
    <header
      class=`px-6 bg-gradient-to-b from-slate-transparent to-black rounded-lg`
    >
      <div class="flex flex-row pb-2 sm:pb-8 pt-2">
        <a
          href="/"
          class="p-2 m-2 rounded-full bg-red bg-black/30 hover:bg-black/50"
        >
          <Arrow />
        </a>
      </div>
      <div class="flex flex-col sm:flex-row gap-8">
        <picture class="w-60 h-w-60 flex-none shadow-xl mx-auto sm:mx-0">
          <img
            src={playlist?.cover}
            alt=`Cover of ${playlist?.title}`
            class="object-cover w-full h-full rounded-lg"
            transition:name=`playlist ${id} image`
          />
        </picture>
        <div class="flex flex-row gap-4">
          <div class="flex flex-col sm:self-end">
            <span class="w-auto">Playlist</span>
            <h4
              class="text-2xl lg:text-5xl text-white font-bold py-1 w-auto"
              transition:name=`playlist ${id} text`
            >
              {playlist?.title}
            </h4>
            <h2
              class="text-sm lg:text-md py-1 w-auto"
              transition:name=`playlist ${id} artists`
            >
              {playlist?.artists.join(", ")}
            </h2>
            <p class="text-sm lg:text-md py-2 w-auto">
              <span class="text-white">{playListSongs.length} canciones</span>, {
                formattedDuration
              } aproximadamente.
            </p>
          </div>
          <div class="block sm:p-4 sm:hidden my-auto">
            <CardPlayButton id={id} size="large" client:visible />
          </div>
        </div>
      </div>
      <div class="hidden sm:p-4 sm:block">
        <CardPlayButton id={id} size="large" client:visible />
      </div>
    </header>
    <MusicTable id={id} songs={playListSongs} />
  </div>
</Layout>
